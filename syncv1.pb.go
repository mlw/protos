// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.0--rc1
// source: syncv1.proto

package sync_v1_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientMode int32

const (
	ClientMode_UNKNOWN_CLIENT_MODE ClientMode = 0
	ClientMode_MONITOR             ClientMode = 1
	ClientMode_LOCKDOWN            ClientMode = 2
)

// Enum value maps for ClientMode.
var (
	ClientMode_name = map[int32]string{
		0: "UNKNOWN_CLIENT_MODE",
		1: "MONITOR",
		2: "LOCKDOWN",
	}
	ClientMode_value = map[string]int32{
		"UNKNOWN_CLIENT_MODE": 0,
		"MONITOR":             1,
		"LOCKDOWN":            2,
	}
)

func (x ClientMode) Enum() *ClientMode {
	p := new(ClientMode)
	*p = x
	return p
}

func (x ClientMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientMode) Descriptor() protoreflect.EnumDescriptor {
	return file_syncv1_proto_enumTypes[0].Descriptor()
}

func (ClientMode) Type() protoreflect.EnumType {
	return &file_syncv1_proto_enumTypes[0]
}

func (x ClientMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientMode.Descriptor instead.
func (ClientMode) EnumDescriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{0}
}

type SyncType int32

const (
	SyncType_SYNC_TYPE_UNSPECIFIED SyncType = 0
	SyncType_NORMAL                SyncType = 1
	// Deprecated: Marked as deprecated in syncv1.proto.
	SyncType_normal SyncType = 1
	SyncType_CLEAN  SyncType = 2
	// Deprecated: Marked as deprecated in syncv1.proto.
	SyncType_clean     SyncType = 2
	SyncType_CLEAN_ALL SyncType = 3
	// Deprecated: Marked as deprecated in syncv1.proto.
	SyncType_clean_all SyncType = 3
)

// Enum value maps for SyncType.
var (
	SyncType_name = map[int32]string{
		0: "SYNC_TYPE_UNSPECIFIED",
		1: "NORMAL",
		// Duplicate value: 1: "normal",
		2: "CLEAN",
		// Duplicate value: 2: "clean",
		3: "CLEAN_ALL",
		// Duplicate value: 3: "clean_all",
	}
	SyncType_value = map[string]int32{
		"SYNC_TYPE_UNSPECIFIED": 0,
		"NORMAL":                1,
		"normal":                1,
		"CLEAN":                 2,
		"clean":                 2,
		"CLEAN_ALL":             3,
		"clean_all":             3,
	}
)

func (x SyncType) Enum() *SyncType {
	p := new(SyncType)
	*p = x
	return p
}

func (x SyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_syncv1_proto_enumTypes[1].Descriptor()
}

func (SyncType) Type() protoreflect.EnumType {
	return &file_syncv1_proto_enumTypes[1]
}

func (x SyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncType.Descriptor instead.
func (SyncType) EnumDescriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{1}
}

type FileAccessAction int32

const (
	FileAccessAction_FILE_ACCESS_ACTION_UNSPECIFIED FileAccessAction = 0
	FileAccessAction_NONE                           FileAccessAction = 1
	// Deprecated: Marked as deprecated in syncv1.proto.
	FileAccessAction_None       FileAccessAction = 1
	FileAccessAction_AUDIT_ONLY FileAccessAction = 2
	// Deprecated: Marked as deprecated in syncv1.proto.
	FileAccessAction_AuditOnly FileAccessAction = 2
	FileAccessAction_DISABLE   FileAccessAction = 3
	// Deprecated: Marked as deprecated in syncv1.proto.
	FileAccessAction_Disable FileAccessAction = 3
)

// Enum value maps for FileAccessAction.
var (
	FileAccessAction_name = map[int32]string{
		0: "FILE_ACCESS_ACTION_UNSPECIFIED",
		1: "NONE",
		// Duplicate value: 1: "None",
		2: "AUDIT_ONLY",
		// Duplicate value: 2: "AuditOnly",
		3: "DISABLE",
		// Duplicate value: 3: "Disable",
	}
	FileAccessAction_value = map[string]int32{
		"FILE_ACCESS_ACTION_UNSPECIFIED": 0,
		"NONE":                           1,
		"None":                           1,
		"AUDIT_ONLY":                     2,
		"AuditOnly":                      2,
		"DISABLE":                        3,
		"Disable":                        3,
	}
)

func (x FileAccessAction) Enum() *FileAccessAction {
	p := new(FileAccessAction)
	*p = x
	return p
}

func (x FileAccessAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileAccessAction) Descriptor() protoreflect.EnumDescriptor {
	return file_syncv1_proto_enumTypes[2].Descriptor()
}

func (FileAccessAction) Type() protoreflect.EnumType {
	return &file_syncv1_proto_enumTypes[2]
}

func (x FileAccessAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileAccessAction.Descriptor instead.
func (FileAccessAction) EnumDescriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{2}
}

type Decision int32

const (
	Decision_DECISION_UNKNOWN  Decision = 0
	Decision_ALLOW_UNKNOWN     Decision = 1
	Decision_ALLOW_BINARY      Decision = 2
	Decision_ALLOW_CERTIFICATE Decision = 3
	Decision_ALLOW_SCOPE       Decision = 4
	Decision_ALLOW_TEAMID      Decision = 5
	Decision_ALLOW_SIGNINGID   Decision = 6
	Decision_ALLOW_CDHASH      Decision = 7
	Decision_BLOCK_UNKNOWN     Decision = 8
	Decision_BLOCK_BINARY      Decision = 9
	Decision_BLOCK_CERTIFICATE Decision = 10
	Decision_BLOCK_SCOPE       Decision = 11
	Decision_BLOCK_TEAMID      Decision = 12
	Decision_BLOCK_SIGNINGID   Decision = 13
	Decision_BLOCK_CDHASH      Decision = 14
	Decision_BUNDLE_BINARY     Decision = 15
)

// Enum value maps for Decision.
var (
	Decision_name = map[int32]string{
		0:  "DECISION_UNKNOWN",
		1:  "ALLOW_UNKNOWN",
		2:  "ALLOW_BINARY",
		3:  "ALLOW_CERTIFICATE",
		4:  "ALLOW_SCOPE",
		5:  "ALLOW_TEAMID",
		6:  "ALLOW_SIGNINGID",
		7:  "ALLOW_CDHASH",
		8:  "BLOCK_UNKNOWN",
		9:  "BLOCK_BINARY",
		10: "BLOCK_CERTIFICATE",
		11: "BLOCK_SCOPE",
		12: "BLOCK_TEAMID",
		13: "BLOCK_SIGNINGID",
		14: "BLOCK_CDHASH",
		15: "BUNDLE_BINARY",
	}
	Decision_value = map[string]int32{
		"DECISION_UNKNOWN":  0,
		"ALLOW_UNKNOWN":     1,
		"ALLOW_BINARY":      2,
		"ALLOW_CERTIFICATE": 3,
		"ALLOW_SCOPE":       4,
		"ALLOW_TEAMID":      5,
		"ALLOW_SIGNINGID":   6,
		"ALLOW_CDHASH":      7,
		"BLOCK_UNKNOWN":     8,
		"BLOCK_BINARY":      9,
		"BLOCK_CERTIFICATE": 10,
		"BLOCK_SCOPE":       11,
		"BLOCK_TEAMID":      12,
		"BLOCK_SIGNINGID":   13,
		"BLOCK_CDHASH":      14,
		"BUNDLE_BINARY":     15,
	}
)

func (x Decision) Enum() *Decision {
	p := new(Decision)
	*p = x
	return p
}

func (x Decision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Decision) Descriptor() protoreflect.EnumDescriptor {
	return file_syncv1_proto_enumTypes[3].Descriptor()
}

func (Decision) Type() protoreflect.EnumType {
	return &file_syncv1_proto_enumTypes[3]
}

func (x Decision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Decision.Descriptor instead.
func (Decision) EnumDescriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{3}
}

type Policy int32

const (
	Policy_POLICY_UNKNOWN     Policy = 0
	Policy_ALLOWLIST          Policy = 1
	Policy_ALLOWLIST_COMPILER Policy = 2
	Policy_BLOCKLIST          Policy = 3
	Policy_SILENT_BLOCKLIST   Policy = 4
	Policy_REMOVE             Policy = 5
	Policy_WHITELIST          Policy = 1
	Policy_WHITELIST_COMPILER Policy = 2
	Policy_BLACKLIST          Policy = 3
	Policy_SILENT_BLACKLIST   Policy = 4
)

// Enum value maps for Policy.
var (
	Policy_name = map[int32]string{
		0: "POLICY_UNKNOWN",
		1: "ALLOWLIST",
		2: "ALLOWLIST_COMPILER",
		3: "BLOCKLIST",
		4: "SILENT_BLOCKLIST",
		5: "REMOVE",
		// Duplicate value: 1: "WHITELIST",
		// Duplicate value: 2: "WHITELIST_COMPILER",
		// Duplicate value: 3: "BLACKLIST",
		// Duplicate value: 4: "SILENT_BLACKLIST",
	}
	Policy_value = map[string]int32{
		"POLICY_UNKNOWN":     0,
		"ALLOWLIST":          1,
		"ALLOWLIST_COMPILER": 2,
		"BLOCKLIST":          3,
		"SILENT_BLOCKLIST":   4,
		"REMOVE":             5,
		"WHITELIST":          1,
		"WHITELIST_COMPILER": 2,
		"BLACKLIST":          3,
		"SILENT_BLACKLIST":   4,
	}
)

func (x Policy) Enum() *Policy {
	p := new(Policy)
	*p = x
	return p
}

func (x Policy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy) Descriptor() protoreflect.EnumDescriptor {
	return file_syncv1_proto_enumTypes[4].Descriptor()
}

func (Policy) Type() protoreflect.EnumType {
	return &file_syncv1_proto_enumTypes[4]
}

func (x Policy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy.Descriptor instead.
func (Policy) EnumDescriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{4}
}

type RuleType int32

const (
	RuleType_RULETYPE_UNKNOWN RuleType = 0
	RuleType_BINARY           RuleType = 1
	RuleType_CERTIFICATE      RuleType = 2
	RuleType_TEAMID           RuleType = 3
	RuleType_SIGNINGID        RuleType = 4
	RuleType_CDHASH           RuleType = 5
)

// Enum value maps for RuleType.
var (
	RuleType_name = map[int32]string{
		0: "RULETYPE_UNKNOWN",
		1: "BINARY",
		2: "CERTIFICATE",
		3: "TEAMID",
		4: "SIGNINGID",
		5: "CDHASH",
	}
	RuleType_value = map[string]int32{
		"RULETYPE_UNKNOWN": 0,
		"BINARY":           1,
		"CERTIFICATE":      2,
		"TEAMID":           3,
		"SIGNINGID":        4,
		"CDHASH":           5,
	}
)

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}

func (x RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_syncv1_proto_enumTypes[5].Descriptor()
}

func (RuleType) Type() protoreflect.EnumType {
	return &file_syncv1_proto_enumTypes[5]
}

func (x RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleType.Descriptor instead.
func (RuleType) EnumDescriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{5}
}

type PreflightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber          string     `protobuf:"bytes,1,opt,name=serial_number,json=serial_num,proto3" json:"serial_number,omitempty"`
	Hostname              string     `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	OsVersion             string     `protobuf:"bytes,3,opt,name=os_version,proto3" json:"os_version,omitempty"`
	OsBuild               string     `protobuf:"bytes,4,opt,name=os_build,proto3" json:"os_build,omitempty"`
	ModelIdentifier       string     `protobuf:"bytes,5,opt,name=model_identifier,proto3" json:"model_identifier,omitempty"`
	SantaVersion          string     `protobuf:"bytes,6,opt,name=santa_version,proto3" json:"santa_version,omitempty"`
	PrimaryUser           string     `protobuf:"bytes,7,opt,name=primary_user,proto3" json:"primary_user,omitempty"`
	PushNotificationToken string     `protobuf:"bytes,8,opt,name=push_notification_token,proto3" json:"push_notification_token,omitempty"`
	ClientMode            ClientMode `protobuf:"varint,9,opt,name=client_mode,proto3,enum=santa.sync.v1.ClientMode" json:"client_mode,omitempty"`
	RequestCleanSync      bool       `protobuf:"varint,10,opt,name=request_clean_sync,proto3" json:"request_clean_sync,omitempty"`
	BinaryRuleCount       uint32     `protobuf:"varint,11,opt,name=binary_rule_count,proto3" json:"binary_rule_count,omitempty"`
	CertificateRuleCount  uint32     `protobuf:"varint,12,opt,name=certificate_rule_count,proto3" json:"certificate_rule_count,omitempty"`
	CompilerRuleCount     uint32     `protobuf:"varint,13,opt,name=compiler_rule_count,proto3" json:"compiler_rule_count,omitempty"`
	TransitiveRuleCount   uint32     `protobuf:"varint,14,opt,name=transitive_rule_count,proto3" json:"transitive_rule_count,omitempty"`
	TeamidRuleCount       uint32     `protobuf:"varint,15,opt,name=teamid_rule_count,proto3" json:"teamid_rule_count,omitempty"`
	SigningidRuleCount    uint32     `protobuf:"varint,16,opt,name=signingid_rule_count,proto3" json:"signingid_rule_count,omitempty"`
	CdhashRuleCount       uint32     `protobuf:"varint,17,opt,name=cdhash_rule_count,proto3" json:"cdhash_rule_count,omitempty"`
	MachineId             string     `protobuf:"bytes,18,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (x *PreflightRequest) Reset() {
	*x = PreflightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightRequest) ProtoMessage() {}

func (x *PreflightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightRequest.ProtoReflect.Descriptor instead.
func (*PreflightRequest) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{0}
}

func (x *PreflightRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *PreflightRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PreflightRequest) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *PreflightRequest) GetOsBuild() string {
	if x != nil {
		return x.OsBuild
	}
	return ""
}

func (x *PreflightRequest) GetModelIdentifier() string {
	if x != nil {
		return x.ModelIdentifier
	}
	return ""
}

func (x *PreflightRequest) GetSantaVersion() string {
	if x != nil {
		return x.SantaVersion
	}
	return ""
}

func (x *PreflightRequest) GetPrimaryUser() string {
	if x != nil {
		return x.PrimaryUser
	}
	return ""
}

func (x *PreflightRequest) GetPushNotificationToken() string {
	if x != nil {
		return x.PushNotificationToken
	}
	return ""
}

func (x *PreflightRequest) GetClientMode() ClientMode {
	if x != nil {
		return x.ClientMode
	}
	return ClientMode_UNKNOWN_CLIENT_MODE
}

func (x *PreflightRequest) GetRequestCleanSync() bool {
	if x != nil {
		return x.RequestCleanSync
	}
	return false
}

func (x *PreflightRequest) GetBinaryRuleCount() uint32 {
	if x != nil {
		return x.BinaryRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetCertificateRuleCount() uint32 {
	if x != nil {
		return x.CertificateRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetCompilerRuleCount() uint32 {
	if x != nil {
		return x.CompilerRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetTransitiveRuleCount() uint32 {
	if x != nil {
		return x.TransitiveRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetTeamidRuleCount() uint32 {
	if x != nil {
		return x.TeamidRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetSigningidRuleCount() uint32 {
	if x != nil {
		return x.SigningidRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetCdhashRuleCount() uint32 {
	if x != nil {
		return x.CdhashRuleCount
	}
	return 0
}

func (x *PreflightRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type PreflightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMode                                    ClientMode        `protobuf:"varint,1,opt,name=client_mode,json=clientMode,proto3,enum=santa.sync.v1.ClientMode" json:"client_mode,omitempty"`
	SyncType                                      *SyncType         `protobuf:"varint,2,opt,name=sync_type,json=syncType,proto3,enum=santa.sync.v1.SyncType,oneof" json:"sync_type,omitempty"`
	BatchSize                                     uint32            `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	EnableBundles                                 *bool             `protobuf:"varint,4,opt,name=enable_bundles,json=enableBundles,proto3,oneof" json:"enable_bundles,omitempty"`
	EnableTransitiveRules                         *bool             `protobuf:"varint,5,opt,name=enable_transitive_rules,json=enableTransitiveRules,proto3,oneof" json:"enable_transitive_rules,omitempty"`
	EnableAllEventUpload                          *bool             `protobuf:"varint,6,opt,name=enable_all_event_upload,json=enableAllEventUpload,proto3,oneof" json:"enable_all_event_upload,omitempty"`
	DisableUnknownEventUpload                     *bool             `protobuf:"varint,7,opt,name=disable_unknown_event_upload,json=disableUnknownEventUpload,proto3,oneof" json:"disable_unknown_event_upload,omitempty"`
	FullSyncIntervalSeconds                       uint32            `protobuf:"varint,8,opt,name=full_sync_interval_seconds,json=full_sync_interval,proto3" json:"full_sync_interval_seconds,omitempty"`
	PushNotificationFullSyncIntervalSeconds       uint32            `protobuf:"varint,9,opt,name=push_notification_full_sync_interval_seconds,json=push_notification_full_sync_interval,proto3" json:"push_notification_full_sync_interval_seconds,omitempty"`
	PushNotificationGlobalRuleSyncDeadlineSeconds uint32            `protobuf:"varint,10,opt,name=push_notification_global_rule_sync_deadline_seconds,json=push_notification_global_rule_sync_deadline,proto3" json:"push_notification_global_rule_sync_deadline_seconds,omitempty"`
	AllowedPathRegex                              *string           `protobuf:"bytes,11,opt,name=allowed_path_regex,json=allowedPathRegex,proto3,oneof" json:"allowed_path_regex,omitempty"`
	BlockedPathRegex                              *string           `protobuf:"bytes,12,opt,name=blocked_path_regex,json=blockedPathRegex,proto3,oneof" json:"blocked_path_regex,omitempty"`
	BlockUsbMount                                 *bool             `protobuf:"varint,13,opt,name=block_usb_mount,json=blockUsbMount,proto3,oneof" json:"block_usb_mount,omitempty"`
	RemountUsbMode                                []string          `protobuf:"bytes,14,rep,name=remount_usb_mode,json=remountUsbMode,proto3" json:"remount_usb_mode,omitempty"`
	OverrideFileAccessAction                      *FileAccessAction `protobuf:"varint,15,opt,name=override_file_access_action,json=overrideFileAccessAction,proto3,enum=santa.sync.v1.FileAccessAction,oneof" json:"override_file_access_action,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedEnabledTransitiveWhitelisting *bool `protobuf:"varint,1000,opt,name=deprecated_enabled_transitive_whitelisting,json=enabled_transitive_whitelisting,proto3,oneof" json:"deprecated_enabled_transitive_whitelisting,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedTransitiveWhitelistingEnabled *bool `protobuf:"varint,1001,opt,name=deprecated_transitive_whitelisting_enabled,json=transitive_whitelisting_enabled,proto3,oneof" json:"deprecated_transitive_whitelisting_enabled,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedBundlesEnabled *bool `protobuf:"varint,1002,opt,name=deprecated_bundles_enabled,json=bundles_enabled,proto3,oneof" json:"deprecated_bundles_enabled,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedFcmFullSyncIntervalSeconds *uint32 `protobuf:"varint,1003,opt,name=deprecated_fcm_full_sync_interval_seconds,json=fcm_full_sync_interval,proto3,oneof" json:"deprecated_fcm_full_sync_interval_seconds,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedFcmGlobalRuleSyncDeadlineSeconds *uint32 `protobuf:"varint,1004,opt,name=deprecated_fcm_global_rule_sync_deadline_seconds,json=fcm_global_rule_sync_deadline,proto3,oneof" json:"deprecated_fcm_global_rule_sync_deadline_seconds,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedWhitelistRegex *string `protobuf:"bytes,1005,opt,name=deprecated_whitelist_regex,json=whitelist_regex,proto3,oneof" json:"deprecated_whitelist_regex,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedBlacklistRegex *string `protobuf:"bytes,1006,opt,name=deprecated_blacklist_regex,json=blacklist_regex,proto3,oneof" json:"deprecated_blacklist_regex,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedCleanSync *bool `protobuf:"varint,1007,opt,name=deprecated_clean_sync,json=clean_sync,proto3,oneof" json:"deprecated_clean_sync,omitempty"`
}

func (x *PreflightResponse) Reset() {
	*x = PreflightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightResponse) ProtoMessage() {}

func (x *PreflightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightResponse.ProtoReflect.Descriptor instead.
func (*PreflightResponse) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{1}
}

func (x *PreflightResponse) GetClientMode() ClientMode {
	if x != nil {
		return x.ClientMode
	}
	return ClientMode_UNKNOWN_CLIENT_MODE
}

func (x *PreflightResponse) GetSyncType() SyncType {
	if x != nil && x.SyncType != nil {
		return *x.SyncType
	}
	return SyncType_SYNC_TYPE_UNSPECIFIED
}

func (x *PreflightResponse) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *PreflightResponse) GetEnableBundles() bool {
	if x != nil && x.EnableBundles != nil {
		return *x.EnableBundles
	}
	return false
}

func (x *PreflightResponse) GetEnableTransitiveRules() bool {
	if x != nil && x.EnableTransitiveRules != nil {
		return *x.EnableTransitiveRules
	}
	return false
}

func (x *PreflightResponse) GetEnableAllEventUpload() bool {
	if x != nil && x.EnableAllEventUpload != nil {
		return *x.EnableAllEventUpload
	}
	return false
}

func (x *PreflightResponse) GetDisableUnknownEventUpload() bool {
	if x != nil && x.DisableUnknownEventUpload != nil {
		return *x.DisableUnknownEventUpload
	}
	return false
}

func (x *PreflightResponse) GetFullSyncIntervalSeconds() uint32 {
	if x != nil {
		return x.FullSyncIntervalSeconds
	}
	return 0
}

func (x *PreflightResponse) GetPushNotificationFullSyncIntervalSeconds() uint32 {
	if x != nil {
		return x.PushNotificationFullSyncIntervalSeconds
	}
	return 0
}

func (x *PreflightResponse) GetPushNotificationGlobalRuleSyncDeadlineSeconds() uint32 {
	if x != nil {
		return x.PushNotificationGlobalRuleSyncDeadlineSeconds
	}
	return 0
}

func (x *PreflightResponse) GetAllowedPathRegex() string {
	if x != nil && x.AllowedPathRegex != nil {
		return *x.AllowedPathRegex
	}
	return ""
}

func (x *PreflightResponse) GetBlockedPathRegex() string {
	if x != nil && x.BlockedPathRegex != nil {
		return *x.BlockedPathRegex
	}
	return ""
}

func (x *PreflightResponse) GetBlockUsbMount() bool {
	if x != nil && x.BlockUsbMount != nil {
		return *x.BlockUsbMount
	}
	return false
}

func (x *PreflightResponse) GetRemountUsbMode() []string {
	if x != nil {
		return x.RemountUsbMode
	}
	return nil
}

func (x *PreflightResponse) GetOverrideFileAccessAction() FileAccessAction {
	if x != nil && x.OverrideFileAccessAction != nil {
		return *x.OverrideFileAccessAction
	}
	return FileAccessAction_FILE_ACCESS_ACTION_UNSPECIFIED
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedEnabledTransitiveWhitelisting() bool {
	if x != nil && x.DeprecatedEnabledTransitiveWhitelisting != nil {
		return *x.DeprecatedEnabledTransitiveWhitelisting
	}
	return false
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedTransitiveWhitelistingEnabled() bool {
	if x != nil && x.DeprecatedTransitiveWhitelistingEnabled != nil {
		return *x.DeprecatedTransitiveWhitelistingEnabled
	}
	return false
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedBundlesEnabled() bool {
	if x != nil && x.DeprecatedBundlesEnabled != nil {
		return *x.DeprecatedBundlesEnabled
	}
	return false
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedFcmFullSyncIntervalSeconds() uint32 {
	if x != nil && x.DeprecatedFcmFullSyncIntervalSeconds != nil {
		return *x.DeprecatedFcmFullSyncIntervalSeconds
	}
	return 0
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedFcmGlobalRuleSyncDeadlineSeconds() uint32 {
	if x != nil && x.DeprecatedFcmGlobalRuleSyncDeadlineSeconds != nil {
		return *x.DeprecatedFcmGlobalRuleSyncDeadlineSeconds
	}
	return 0
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedWhitelistRegex() string {
	if x != nil && x.DeprecatedWhitelistRegex != nil {
		return *x.DeprecatedWhitelistRegex
	}
	return ""
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedBlacklistRegex() string {
	if x != nil && x.DeprecatedBlacklistRegex != nil {
		return *x.DeprecatedBlacklistRegex
	}
	return ""
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *PreflightResponse) GetDeprecatedCleanSync() bool {
	if x != nil && x.DeprecatedCleanSync != nil {
		return *x.DeprecatedCleanSync
	}
	return false
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256     string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Cn         string `protobuf:"bytes,2,opt,name=cn,proto3" json:"cn,omitempty"`
	Org        string `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`
	Ou         string `protobuf:"bytes,4,opt,name=ou,proto3" json:"ou,omitempty"`
	ValidFrom  uint32 `protobuf:"varint,5,opt,name=valid_from,proto3" json:"valid_from,omitempty"`
	ValidUntil uint32 `protobuf:"varint,6,opt,name=valid_until,proto3" json:"valid_until,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{2}
}

func (x *Certificate) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *Certificate) GetCn() string {
	if x != nil {
		return x.Cn
	}
	return ""
}

func (x *Certificate) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *Certificate) GetOu() string {
	if x != nil {
		return x.Ou
	}
	return ""
}

func (x *Certificate) GetValidFrom() uint32 {
	if x != nil {
		return x.ValidFrom
	}
	return 0
}

func (x *Certificate) GetValidUntil() uint32 {
	if x != nil {
		return x.ValidUntil
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSha256                  string         `protobuf:"bytes,1,opt,name=file_sha256,proto3" json:"file_sha256,omitempty"`
	FilePath                    string         `protobuf:"bytes,2,opt,name=file_path,proto3" json:"file_path,omitempty"`
	FileName                    string         `protobuf:"bytes,3,opt,name=file_name,proto3" json:"file_name,omitempty"`
	ExecutingUser               string         `protobuf:"bytes,4,opt,name=executing_user,proto3" json:"executing_user,omitempty"`
	ExecutionTime               float64        `protobuf:"fixed64,5,opt,name=execution_time,proto3" json:"execution_time,omitempty"`
	LoggedInUsers               []string       `protobuf:"bytes,6,rep,name=logged_in_users,proto3" json:"logged_in_users,omitempty"`
	CurrentSessions             []string       `protobuf:"bytes,7,rep,name=current_sessions,proto3" json:"current_sessions,omitempty"`
	Decision                    Decision       `protobuf:"varint,8,opt,name=decision,proto3,enum=santa.sync.v1.Decision" json:"decision,omitempty"`
	FileBundleId                string         `protobuf:"bytes,9,opt,name=file_bundle_id,proto3" json:"file_bundle_id,omitempty"`
	FileBundlePath              string         `protobuf:"bytes,10,opt,name=file_bundle_path,proto3" json:"file_bundle_path,omitempty"`
	FileBundleExecutableRelPath string         `protobuf:"bytes,11,opt,name=file_bundle_executable_rel_path,proto3" json:"file_bundle_executable_rel_path,omitempty"`
	FileBundleName              string         `protobuf:"bytes,12,opt,name=file_bundle_name,proto3" json:"file_bundle_name,omitempty"`
	FileBundleVersion           string         `protobuf:"bytes,13,opt,name=file_bundle_version,proto3" json:"file_bundle_version,omitempty"`
	FileBundleVersionString     string         `protobuf:"bytes,14,opt,name=file_bundle_version_string,proto3" json:"file_bundle_version_string,omitempty"`
	FileBundleHash              string         `protobuf:"bytes,15,opt,name=file_bundle_hash,proto3" json:"file_bundle_hash,omitempty"`
	FileBundleHashMillis        uint32         `protobuf:"varint,16,opt,name=file_bundle_hash_millis,proto3" json:"file_bundle_hash_millis,omitempty"`
	FileBundleBinaryCount       uint32         `protobuf:"varint,17,opt,name=file_bundle_binary_count,proto3" json:"file_bundle_binary_count,omitempty"`
	Pid                         int32          `protobuf:"varint,18,opt,name=pid,proto3" json:"pid,omitempty"`
	Ppid                        int32          `protobuf:"varint,19,opt,name=ppid,proto3" json:"ppid,omitempty"`
	ParentName                  string         `protobuf:"bytes,20,opt,name=parent_name,proto3" json:"parent_name,omitempty"`
	TeamId                      string         `protobuf:"bytes,21,opt,name=team_id,proto3" json:"team_id,omitempty"`
	SigningId                   string         `protobuf:"bytes,22,opt,name=signing_id,proto3" json:"signing_id,omitempty"`
	Cdhash                      string         `protobuf:"bytes,23,opt,name=cdhash,proto3" json:"cdhash,omitempty"`
	QuarantineDataUrl           string         `protobuf:"bytes,24,opt,name=quarantine_data_url,proto3" json:"quarantine_data_url,omitempty"`
	QuarantineRefererUrl        string         `protobuf:"bytes,25,opt,name=quarantine_referer_url,proto3" json:"quarantine_referer_url,omitempty"`
	QuarantineTimestamp         uint32         `protobuf:"varint,26,opt,name=quarantine_timestamp,proto3" json:"quarantine_timestamp,omitempty"`
	QuarantineAgentBundleId     string         `protobuf:"bytes,27,opt,name=quarantine_agent_bundle_id,proto3" json:"quarantine_agent_bundle_id,omitempty"`
	SigningChain                []*Certificate `protobuf:"bytes,28,rep,name=signing_chain,proto3" json:"signing_chain,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{3}
}

func (x *Event) GetFileSha256() string {
	if x != nil {
		return x.FileSha256
	}
	return ""
}

func (x *Event) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Event) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Event) GetExecutingUser() string {
	if x != nil {
		return x.ExecutingUser
	}
	return ""
}

func (x *Event) GetExecutionTime() float64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Event) GetLoggedInUsers() []string {
	if x != nil {
		return x.LoggedInUsers
	}
	return nil
}

func (x *Event) GetCurrentSessions() []string {
	if x != nil {
		return x.CurrentSessions
	}
	return nil
}

func (x *Event) GetDecision() Decision {
	if x != nil {
		return x.Decision
	}
	return Decision_DECISION_UNKNOWN
}

func (x *Event) GetFileBundleId() string {
	if x != nil {
		return x.FileBundleId
	}
	return ""
}

func (x *Event) GetFileBundlePath() string {
	if x != nil {
		return x.FileBundlePath
	}
	return ""
}

func (x *Event) GetFileBundleExecutableRelPath() string {
	if x != nil {
		return x.FileBundleExecutableRelPath
	}
	return ""
}

func (x *Event) GetFileBundleName() string {
	if x != nil {
		return x.FileBundleName
	}
	return ""
}

func (x *Event) GetFileBundleVersion() string {
	if x != nil {
		return x.FileBundleVersion
	}
	return ""
}

func (x *Event) GetFileBundleVersionString() string {
	if x != nil {
		return x.FileBundleVersionString
	}
	return ""
}

func (x *Event) GetFileBundleHash() string {
	if x != nil {
		return x.FileBundleHash
	}
	return ""
}

func (x *Event) GetFileBundleHashMillis() uint32 {
	if x != nil {
		return x.FileBundleHashMillis
	}
	return 0
}

func (x *Event) GetFileBundleBinaryCount() uint32 {
	if x != nil {
		return x.FileBundleBinaryCount
	}
	return 0
}

func (x *Event) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Event) GetPpid() int32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *Event) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *Event) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *Event) GetSigningId() string {
	if x != nil {
		return x.SigningId
	}
	return ""
}

func (x *Event) GetCdhash() string {
	if x != nil {
		return x.Cdhash
	}
	return ""
}

func (x *Event) GetQuarantineDataUrl() string {
	if x != nil {
		return x.QuarantineDataUrl
	}
	return ""
}

func (x *Event) GetQuarantineRefererUrl() string {
	if x != nil {
		return x.QuarantineRefererUrl
	}
	return ""
}

func (x *Event) GetQuarantineTimestamp() uint32 {
	if x != nil {
		return x.QuarantineTimestamp
	}
	return 0
}

func (x *Event) GetQuarantineAgentBundleId() string {
	if x != nil {
		return x.QuarantineAgentBundleId
	}
	return ""
}

func (x *Event) GetSigningChain() []*Certificate {
	if x != nil {
		return x.SigningChain
	}
	return nil
}

type EventUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events    []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	MachineId string   `protobuf:"bytes,2,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (x *EventUploadRequest) Reset() {
	*x = EventUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUploadRequest) ProtoMessage() {}

func (x *EventUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUploadRequest.ProtoReflect.Descriptor instead.
func (*EventUploadRequest) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{4}
}

func (x *EventUploadRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventUploadRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type EventUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventUploadBundleBinaries []string `protobuf:"bytes,1,rep,name=event_upload_bundle_binaries,json=eventUploadBundleBinaries,proto3" json:"event_upload_bundle_binaries,omitempty"`
}

func (x *EventUploadResponse) Reset() {
	*x = EventUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUploadResponse) ProtoMessage() {}

func (x *EventUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUploadResponse.ProtoReflect.Descriptor instead.
func (*EventUploadResponse) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{5}
}

func (x *EventUploadResponse) GetEventUploadBundleBinaries() []string {
	if x != nil {
		return x.EventUploadBundleBinaries
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier            string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Policy                Policy   `protobuf:"varint,2,opt,name=policy,proto3,enum=santa.sync.v1.Policy" json:"policy,omitempty"`
	RuleType              RuleType `protobuf:"varint,3,opt,name=rule_type,json=ruleType,proto3,enum=santa.sync.v1.RuleType" json:"rule_type,omitempty"`
	CustomMsg             string   `protobuf:"bytes,4,opt,name=custom_msg,json=customMsg,proto3" json:"custom_msg,omitempty"`
	CustomUrl             string   `protobuf:"bytes,5,opt,name=custom_url,json=customUrl,proto3" json:"custom_url,omitempty"`
	FileBundleHash        string   `protobuf:"bytes,6,opt,name=file_bundle_hash,json=fileBundleHash,proto3" json:"file_bundle_hash,omitempty"`
	FileBundleBinaryCount uint32   `protobuf:"varint,7,opt,name=file_bundle_binary_count,json=fileBundleBinaryCount,proto3" json:"file_bundle_binary_count,omitempty"`
	// Deprecated: Marked as deprecated in syncv1.proto.
	DeprecatedSha256 string `protobuf:"bytes,1000,opt,name=deprecated_sha256,json=sha256,proto3" json:"deprecated_sha256,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{6}
}

func (x *Rule) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Rule) GetPolicy() Policy {
	if x != nil {
		return x.Policy
	}
	return Policy_POLICY_UNKNOWN
}

func (x *Rule) GetRuleType() RuleType {
	if x != nil {
		return x.RuleType
	}
	return RuleType_RULETYPE_UNKNOWN
}

func (x *Rule) GetCustomMsg() string {
	if x != nil {
		return x.CustomMsg
	}
	return ""
}

func (x *Rule) GetCustomUrl() string {
	if x != nil {
		return x.CustomUrl
	}
	return ""
}

func (x *Rule) GetFileBundleHash() string {
	if x != nil {
		return x.FileBundleHash
	}
	return ""
}

func (x *Rule) GetFileBundleBinaryCount() uint32 {
	if x != nil {
		return x.FileBundleBinaryCount
	}
	return 0
}

// Deprecated: Marked as deprecated in syncv1.proto.
func (x *Rule) GetDeprecatedSha256() string {
	if x != nil {
		return x.DeprecatedSha256
	}
	return ""
}

type RuleDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor    string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	MachineId string `protobuf:"bytes,2,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (x *RuleDownloadRequest) Reset() {
	*x = RuleDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDownloadRequest) ProtoMessage() {}

func (x *RuleDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDownloadRequest.ProtoReflect.Descriptor instead.
func (*RuleDownloadRequest) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{7}
}

func (x *RuleDownloadRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *RuleDownloadRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type RuleDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules  []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Cursor string  `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *RuleDownloadResponse) Reset() {
	*x = RuleDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDownloadResponse) ProtoMessage() {}

func (x *RuleDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDownloadResponse.ProtoReflect.Descriptor instead.
func (*RuleDownloadResponse) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{8}
}

func (x *RuleDownloadResponse) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RuleDownloadResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type PostflightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RulesReceived  uint32 `protobuf:"varint,1,opt,name=rules_received,proto3" json:"rules_received,omitempty"`
	RulesProcessed uint32 `protobuf:"varint,2,opt,name=rules_processed,proto3" json:"rules_processed,omitempty"`
	MachineId      string `protobuf:"bytes,3,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (x *PostflightRequest) Reset() {
	*x = PostflightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostflightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostflightRequest) ProtoMessage() {}

func (x *PostflightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostflightRequest.ProtoReflect.Descriptor instead.
func (*PostflightRequest) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{9}
}

func (x *PostflightRequest) GetRulesReceived() uint32 {
	if x != nil {
		return x.RulesReceived
	}
	return 0
}

func (x *PostflightRequest) GetRulesProcessed() uint32 {
	if x != nil {
		return x.RulesProcessed
	}
	return 0
}

func (x *PostflightRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type PostflightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostflightResponse) Reset() {
	*x = PostflightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncv1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostflightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostflightResponse) ProtoMessage() {}

func (x *PostflightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syncv1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostflightResponse.ProtoReflect.Descriptor instead.
func (*PostflightResponse) Descriptor() ([]byte, []int) {
	return file_syncv1_proto_rawDescGZIP(), []int{10}
}

var File_syncv1_proto protoreflect.FileDescriptor

var file_syncv1_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x22, 0xa8, 0x06,
	0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x69, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x69, 0x64, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x64,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x64, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xb0, 0x10, 0x0a, 0x11, 0x50, 0x72, 0x65,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x1a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x2c, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x33, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x2b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x62,
	0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x62, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x62, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x1b, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x08, 0x52, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x5d, 0x0a, 0x2a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x48, 0x09, 0x52, 0x1f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5d,
	0x0a, 0x2a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x48, 0x0a, 0x52, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x48, 0x0b, 0x52, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x29,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x63, 0x6d, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x0c, 0x52, 0x16, 0x66, 0x63, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x61, 0x0a, 0x30, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x63, 0x6d, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x0d, 0x52, 0x1d, 0x66, 0x63, 0x6d, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x0e, 0x52,
	0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x0f, 0x52, 0x0f,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0xef, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x48, 0x10, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x62, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x63, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x33,
	0x0a, 0x31, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x63,
	0x6d, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x99, 0x01, 0x0a, 0x0b,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x63, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0xd8, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x48,
	0x0a, 0x1f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x64,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x64, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x14,
	0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x71, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3e, 0x0a, 0x1a, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x62, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd4,
	0x02, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x11, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x14, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x85, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x40, 0x0a,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a,
	0x81, 0x01, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x09,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x03, 0x1a, 0x02, 0x08, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xbf, 0x02, 0x0a, 0x08, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x44, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x44, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49,
	0x4e, 0x47, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x43, 0x44, 0x48, 0x41, 0x53, 0x48, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x0f, 0x2a, 0xc4, 0x01, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x4c, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x1a, 0x02,
	0x10, 0x01, 0x2a, 0x64, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x55, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x44, 0x48, 0x41, 0x53, 0x48, 0x10, 0x05, 0x32, 0xe5, 0x02, 0x0a, 0x09, 0x53, 0x61, 0x6e,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x50, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syncv1_proto_rawDescOnce sync.Once
	file_syncv1_proto_rawDescData = file_syncv1_proto_rawDesc
)

func file_syncv1_proto_rawDescGZIP() []byte {
	file_syncv1_proto_rawDescOnce.Do(func() {
		file_syncv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_syncv1_proto_rawDescData)
	})
	return file_syncv1_proto_rawDescData
}

var file_syncv1_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_syncv1_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_syncv1_proto_goTypes = []interface{}{
	(ClientMode)(0),              // 0: santa.sync.v1.ClientMode
	(SyncType)(0),                // 1: santa.sync.v1.SyncType
	(FileAccessAction)(0),        // 2: santa.sync.v1.FileAccessAction
	(Decision)(0),                // 3: santa.sync.v1.Decision
	(Policy)(0),                  // 4: santa.sync.v1.Policy
	(RuleType)(0),                // 5: santa.sync.v1.RuleType
	(*PreflightRequest)(nil),     // 6: santa.sync.v1.PreflightRequest
	(*PreflightResponse)(nil),    // 7: santa.sync.v1.PreflightResponse
	(*Certificate)(nil),          // 8: santa.sync.v1.Certificate
	(*Event)(nil),                // 9: santa.sync.v1.Event
	(*EventUploadRequest)(nil),   // 10: santa.sync.v1.EventUploadRequest
	(*EventUploadResponse)(nil),  // 11: santa.sync.v1.EventUploadResponse
	(*Rule)(nil),                 // 12: santa.sync.v1.Rule
	(*RuleDownloadRequest)(nil),  // 13: santa.sync.v1.RuleDownloadRequest
	(*RuleDownloadResponse)(nil), // 14: santa.sync.v1.RuleDownloadResponse
	(*PostflightRequest)(nil),    // 15: santa.sync.v1.PostflightRequest
	(*PostflightResponse)(nil),   // 16: santa.sync.v1.PostflightResponse
}
var file_syncv1_proto_depIdxs = []int32{
	0,  // 0: santa.sync.v1.PreflightRequest.client_mode:type_name -> santa.sync.v1.ClientMode
	0,  // 1: santa.sync.v1.PreflightResponse.client_mode:type_name -> santa.sync.v1.ClientMode
	1,  // 2: santa.sync.v1.PreflightResponse.sync_type:type_name -> santa.sync.v1.SyncType
	2,  // 3: santa.sync.v1.PreflightResponse.override_file_access_action:type_name -> santa.sync.v1.FileAccessAction
	3,  // 4: santa.sync.v1.Event.decision:type_name -> santa.sync.v1.Decision
	8,  // 5: santa.sync.v1.Event.signing_chain:type_name -> santa.sync.v1.Certificate
	9,  // 6: santa.sync.v1.EventUploadRequest.events:type_name -> santa.sync.v1.Event
	4,  // 7: santa.sync.v1.Rule.policy:type_name -> santa.sync.v1.Policy
	5,  // 8: santa.sync.v1.Rule.rule_type:type_name -> santa.sync.v1.RuleType
	12, // 9: santa.sync.v1.RuleDownloadResponse.rules:type_name -> santa.sync.v1.Rule
	6,  // 10: santa.sync.v1.SantaSync.Preflight:input_type -> santa.sync.v1.PreflightRequest
	10, // 11: santa.sync.v1.SantaSync.EventUpload:input_type -> santa.sync.v1.EventUploadRequest
	13, // 12: santa.sync.v1.SantaSync.RuleDownload:input_type -> santa.sync.v1.RuleDownloadRequest
	15, // 13: santa.sync.v1.SantaSync.Postflight:input_type -> santa.sync.v1.PostflightRequest
	7,  // 14: santa.sync.v1.SantaSync.Preflight:output_type -> santa.sync.v1.PreflightResponse
	11, // 15: santa.sync.v1.SantaSync.EventUpload:output_type -> santa.sync.v1.EventUploadResponse
	14, // 16: santa.sync.v1.SantaSync.RuleDownload:output_type -> santa.sync.v1.RuleDownloadResponse
	16, // 17: santa.sync.v1.SantaSync.Postflight:output_type -> santa.sync.v1.PostflightResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_syncv1_proto_init() }
func file_syncv1_proto_init() {
	if File_syncv1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_syncv1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostflightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncv1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostflightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_syncv1_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syncv1_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_syncv1_proto_goTypes,
		DependencyIndexes: file_syncv1_proto_depIdxs,
		EnumInfos:         file_syncv1_proto_enumTypes,
		MessageInfos:      file_syncv1_proto_msgTypes,
	}.Build()
	File_syncv1_proto = out.File
	file_syncv1_proto_rawDesc = nil
	file_syncv1_proto_goTypes = nil
	file_syncv1_proto_depIdxs = nil
}
